function ljet = localjet_xyt(f, pos)

%
% ljet=localjet_xyt(f,pos)
%
%   computes responses of spatio-temporal derivatives for points
%   pos=(y,x,t,sx2,st2) in space-time. 
%   ljet=[Lx Ly Lt ...
%         Lxx Lxy Lyy Lxt Lyt Ltt ...
%         Lxxx Lxxy Lxyy Lyyy Lxxt Lxyt Lyyt Lxtt Lytt Lttt...
%         Lxxxx Lxxxy Lxxyy Lxyyy Lyyyy Lxxxt Lxxyt Lxyyt Lyyyt Lxxtt Lxytt Lyytt Lxttt Lyttt Ltttt]
%

ljet = [];
[ysize, xsize, tsize] = size(f);

velflag = 0;
vx = 0; vy = 0; xszf = 1;

if size(pos, 2) > 5
    velflag = 1;
end

for i = 1:size(pos, 1)
  if ~mod(i,100) fprintf('\n'); end
  fprintf('%d ',i)
  px=min(max(pos(i,2),1),xsize);
  py=min(max(pos(i,1),1),ysize);
  pt=min(max(pos(i,3),1),tsize);
  sxl2=pos(i,4);
  stl2=pos(i,5);
  if velflag
    vx=pos(i,6);
    vy=pos(i,7);
    xszf=1+max(abs(vx),abs(vy)); 
  end
     
  brx=max(5,round(xszf*5*sqrt(sxl2)));
  brt=max(5,round(5*sqrt(stl2)));

  % cut out a part of f
  fcut=f(max(1,py-brx):min(ysize,py+brx),...
	 max(1,px-brx):min(xsize,px+brx),...
	 max(1,pt-brt):min(tsize,pt+brt));
  cy=min(brx+1,py);
  cx=min(brx+1,px);
  ct=min(brt+1,pt);
  
  if velflag % if adapting velocity
    fcut=warpvelfloat_xyt(fcut,-vx,-vy,ct);
    brx=max(5,round(5*sqrt(sxl2)));
    fcut=fcut(max(1,cy-brx):min(size(fcut,1),cy+brx),...
	      max(1,cx-brx):min(size(fcut,2),cx+brx),:);
    cy=min(brx+1,cy);
    cx=min(brx+1,cx);
  end
  
  L=sepgaussconvfast_xyt(fcut,sxl2,stl2);
  %L=fcut;   
   
  if 0 % display
    fh=figure;
    thresh=max(L(:))/2;
    showisosurface(shiftdim(L(:,:,:),1),thresh), hold on
    [xsph,ysph,zsph]=sphere(20);
    rxsph=2*sqrt(sxl2);
    rtsph=2*sqrt(stl2);
    surf(rtsph*xsph+ct,rxsph*ysph+cx,rxsph*zsph+cy,'EdgeColor','none','FaceColor','blue');
    pause
    close(fh)
  end

  msz = (size(dxmask3, 1)-1)/2;
  Lext = extend3(L, msz, msz, msz);
  Lcut = Lext(cy:cy+2*msz, cx:cx+2*msz, ct:ct+2*msz);
  ljet(i, :) = [filter3(Lcut,dxmask3,'valid') ...
                filter3(Lcut,dymask3,'valid') ...
                filter3(Lcut,dtmask3,'valid') ...
                filter3(Lcut,dxxmask3,'valid') ...
                filter3(Lcut,dxymask3,'valid') ...
                filter3(Lcut,dyymask3,'valid') ...
                filter3(Lcut,dxtmask3,'valid') ...
                filter3(Lcut,dytmask3,'valid') ...
                filter3(Lcut,dttmask3,'valid') ...
                filter3(Lcut,dxxxmask3,'valid') ...
                filter3(Lcut,dxxymask3,'valid') ...
                filter3(Lcut,dxyymask3,'valid') ...
                filter3(Lcut,dyyymask3,'valid') ...
                filter3(Lcut,dxxtmask3,'valid') ...
                filter3(Lcut,dxytmask3,'valid') ...
                filter3(Lcut,dyytmask3,'valid') ...
                filter3(Lcut,dxttmask3,'valid') ...
                filter3(Lcut,dyttmask3,'valid') ...
                filter3(Lcut,dtttmask3,'valid') ...
                filter3(Lcut,dxxxxmask3,'valid') ...
                filter3(Lcut,dxxxymask3,'valid') ...
                filter3(Lcut,dxxyymask3,'valid') ...
                filter3(Lcut,dxyyymask3,'valid') ...
                filter3(Lcut,dyyyymask3,'valid') ...
                filter3(Lcut,dxxxtmask3,'valid') ...
                filter3(Lcut,dxxytmask3,'valid') ...
                filter3(Lcut,dxyytmask3,'valid') ...
                filter3(Lcut,dyyytmask3,'valid') ...
                filter3(Lcut,dxxttmask3,'valid') ...
                filter3(Lcut,dxyttmask3,'valid') ...
                filter3(Lcut,dyyttmask3,'valid') ...
                filter3(Lcut,dxtttmask3,'valid') ...
                filter3(Lcut,dytttmask3,'valid') ...
                filter3(Lcut,dttttmask3,'valid')];

  % scale normalisation
  sx1=sqrt(sxl2);
  st1=sqrt(stl2);
  sx2=sx1^2; sx3=sx1^3; sx4=sx1^4;
  st2=st1^2; st3=st1^3; st4=st1^4;
  
  normvec=[sx1 sx1 st1 ...
           sx2 sx2 sx2 sx1*st1 sx1*st1 st2 ...
           sx3 sx3 sx3 sx3 sx2*st1 sx2*st1 sx2*st1 sx1*st2 sx1*st2 st3 ...
           sx4 sx4 sx4 sx4 sx4 sx3*st1 sx3*st1 sx3*st1 sx3*st1 sx2*st2 sx2*st2 sx2*st2 ...
           sx1*st3 sx1*st3 st4];

  ljet(i,:)=ljet(i,:).*normvec;

end
